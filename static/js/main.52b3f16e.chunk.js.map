{"version":3,"sources":["actions/EmployeeActions.ts","components/Employee/Employee.tsx","components/EmployeesCard/EmployeesCard.tsx","components/BirthdayEmployee/BirthdayEmployee.tsx","components/BirthdayCard/BirthdayCard.tsx","components/EmployeeList/EmployeeList.tsx","App.tsx","reducers/employeeReducer.ts","store/Store.tsx","index.tsx"],"names":["EmployeeActionTypes","Employee","employee","dispatch","saveToStorage","useDispatch","handleChange","id","type","TOGGLE_EMPLOYEE","style","color","selected","fontSize","firstName","lastName","action","className","checked","onChange","htmlFor","EmployeesCard","letter","employees","length","map","e","BirthdayEmployee","date","Date","dob","year","getFullYear","toLocaleString","day","month","split","BirthdayCard","EmployeeList","useSelector","state","useState","alphabet","setAlphabet","months","setMonths","useEffect","Array","from","i","x","String","fromCharCode","push","setMonth","getMonth","window","localStorage","setItem","JSON","stringify","sortedByFirst","sort","e1","e2","toLowerCase","filter","textAlign","list","borderBottom","m","App","localEmployees","parse","getItem","GET_ALL_FROM_STORAGE","console","log","a","axios","get","response","modifiedResponse","data","GET_ALL","path","element","to","initialEmployeeState","rootReducer","combineReducers","employeeToChange","find","changedEmployee","updatedList","Root","props","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52b3f16e.chunk.js","sourcesContent":["import { ActionCreator, Dispatch } from 'redux'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport axios from 'axios'\r\n\r\nimport { IEmployee, IEmployeeState } from '../reducers/employeeReducer'\r\n\r\nexport enum EmployeeActionTypes {\r\n  GET_ALL = 'GET_ALL',\r\n  TOGGLE_EMPLOYEE = 'TOGGLE_EMPLOYEE',\r\n  GET_ALL_FROM_STORAGE = 'GET_ALL_FROM_STORAGE'\r\n}\r\n\r\nexport interface IEmployeeGetAllAction {\r\n  type: EmployeeActionTypes.GET_ALL\r\n  employees: IEmployee[]\r\n}\r\nexport interface IEmployeeToggleAction {\r\n  type: EmployeeActionTypes.TOGGLE_EMPLOYEE\r\n  id: string\r\n}\r\nexport interface IEmployeeGetStorage {\r\n  type: EmployeeActionTypes.GET_ALL_FROM_STORAGE\r\n  employees: IEmployee[]\r\n}\r\n\r\n//add to next export other action types with union(|)\r\nexport type EmployeeActions = IEmployeeGetAllAction | IEmployeeToggleAction | IEmployeeGetStorage\r\n\r\nexport const getAllEmployees: ActionCreator<ThunkAction<Promise<any>, IEmployeeState, null, IEmployeeGetAllAction>>\r\n  = () => {\r\n    return async (dispatch: Dispatch) => {\r\n      try {\r\n        const response = await axios.get('https://yalantis-react-school-api.yalantis.com/api/task0/users')\r\n        const modifiedResponse = response.data.map((e: IEmployee) => e.selected ? e : { ...e, selected: false })\r\n        dispatch({\r\n          employees: modifiedResponse,\r\n          type: EmployeeActionTypes.GET_ALL\r\n        })\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n  }\r\n\r\nexport const toggleEmployee = (id: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch({\r\n      id,\r\n      type: EmployeeActionTypes.TOGGLE_EMPLOYEE\r\n    })\r\n  }\r\n}\r\n\r\nexport const getFromStorage = (employees: IEmployee[]) => {\r\n  return (dispatch: Dispatch) => {\r\n    //const employees: IEmployee[] = JSON.parse(window.localStorage.getItem('employees') || '')\r\n    dispatch({\r\n      employees,\r\n      type: EmployeeActionTypes.GET_ALL_FROM_STORAGE\r\n    })\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { IEmployeeProps } from './types'\r\nimport './style.css'\r\nimport { useDispatch } from 'react-redux'\r\nimport { toggleEmployee } from '../../actions/EmployeeActions'\r\n\r\nexport const Employee: React.FC<IEmployeeProps> = ({ employee, saveToStorage }) => {\r\n  const dispatch = useDispatch()\r\n  const handleChange = () => {\r\n    dispatch(toggleEmployee(employee.id))\r\n    //saveToStorage()\r\n  }\r\n  const style = { color: employee.selected ? 'blue' : 'black', fontSize: '20px' }\r\n  return (\r\n    <div>\r\n      <div style={style}>\r\n        {employee.firstName} {employee.lastName}\r\n      </div>\r\n      <form action=\"\" className='form'>\r\n        <div className='label-input'>\r\n          <input type=\"radio\" checked={employee.selected} onChange={handleChange} />\r\n          <label htmlFor=\"\">active</label>\r\n        </div>\r\n        <div className='label-input'>\r\n          <input type=\"radio\" checked={!employee.selected} onChange={handleChange} />\r\n          <label htmlFor=\"\">not active</label>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}","import * as React from 'react';\r\nimport { IEmployeesCardProps } from './types'\r\nimport { Employee } from '../Employee/Employee'\r\nimport { IEmployee } from '../../reducers/employeeReducer'\r\n\r\nexport const EmployeesCard: React.FC<IEmployeesCardProps> = ({ letter, employees, saveToStorage }) => {\r\n\r\n  if (employees.length === 0) return <div><p>{letter}</p>No Employees</div>\r\n\r\n\r\n  return (\r\n    <div key={letter}>\r\n      <p>{letter}</p>\r\n      {employees.map((e: IEmployee) => {\r\n        return <Employee employee={e} key={e.id} saveToStorage={saveToStorage} />\r\n      })}\r\n    </div>\r\n  )\r\n}","import * as React from 'react';\r\nimport { IBirthdayEmployeeProps } from './types'\r\n\r\nconst style = {\r\n  fontSize: '16px'\r\n}\r\n\r\nexport const BirthdayEmployee: React.FC<IBirthdayEmployeeProps> = ({ employee }) => {\r\n  const date = new Date(employee.dob)\r\n  const year = date.getFullYear()\r\n  const [month, day] = date.toLocaleString('default', { day: 'numeric', month: 'long' }).split(' ')\r\n  return (\r\n    <div>\r\n      <p style={style}>\r\n        {employee.firstName} {employee.lastName} - {day} {month}, {year} year\r\n      </p>\r\n    </div>\r\n  )\r\n}","import * as React from 'react';\r\nimport { IBirthdayCardProps } from './types'\r\nimport { BirthdayEmployee } from '../BirthdayEmployee/BirthdayEmployee'\r\n\r\nexport const BirthdayCard: React.FC<IBirthdayCardProps> = ({ month, employees }) => {\r\n\r\n  if (employees.length === 0) return <div><h3>{month}</h3>No Employees</div>\r\n\r\n  return (\r\n    <div>\r\n      <h3>{month}</h3>\r\n      {employees.map(e => <BirthdayEmployee employee={e} key={e.id} />)}\r\n    </div>\r\n  )\r\n}","import * as React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport { IAppState } from '../../store/Store'\r\nimport { IEmployee } from '../../reducers/employeeReducer'\r\nimport { EmployeesCard } from '../EmployeesCard/EmployeesCard'\r\nimport './style.css'\r\nimport { BirthdayCard } from '../BirthdayCard/BirthdayCard';\r\n//repeat(3, 1fr)\r\n\r\n\r\n\r\nexport const EmployeeList = () => {\r\n  const employees = useSelector((state: IAppState) => state.employees.employees)\r\n  const [alphabet, setAlphabet] = useState<string[]>([]);\r\n  const [months, setMonths] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    const alpha = Array.from(Array(26)).map((e, i) => i + 65)\r\n    const alphabet = alpha.map((x) => String.fromCharCode(x))//upperCase alphabet\r\n    setAlphabet(alphabet)\r\n\r\n    const date = new Date('Wed Nov 24 2021 16:51:08 GMT+0200 (Eastern European Standard Time)');\r\n    let months: string[] = []\r\n    for (let i = 0; i < 12; i++) {\r\n      const month = date.toLocaleString('default', { month: 'long' });\r\n      months.push(month)\r\n      date.setMonth(date.getMonth() + 1)\r\n    }\r\n    setMonths(months)\r\n  }, [])\r\n\r\n  const saveToStorage = () => {\r\n    if (employees && employees.length > 0) window.localStorage.setItem('employees', JSON.stringify(employees))\r\n  }\r\n  useEffect(() => {\r\n    saveToStorage()//eslint-disable-next-line\r\n  }, [employees])\r\n\r\n  const sortedByFirst: IEmployee[] = employees.sort((e1: IEmployee, e2: IEmployee): number => {\r\n    if (e1.firstName.toLowerCase() > e2.firstName.toLowerCase()) return 1\r\n    else if (e1.firstName.toLowerCase() < e2.firstName.toLowerCase()) return -1\r\n    return 0\r\n  })\r\n\r\n  const selected = sortedByFirst.filter(e => e.selected)\r\n\r\n\r\n  //const letterizedObject = Object.fromEntries(alphabet.map())\r\n\r\n  // const list = sortedByFirst.filter((e: IEmployee): boolean => e.firstName[0] === letter)\r\n  return (\r\n    <div className='employee-container'>\r\n      <div>\r\n        <h2 style={{ textAlign: 'center' }}>Employees</h2>\r\n        <div className='employee-list'>\r\n          {alphabet.map((letter: string) => {\r\n            const list: IEmployee[] = sortedByFirst.filter((e: IEmployee): boolean => e.firstName[0] === letter)\r\n            return (\r\n              <div key={letter}>\r\n                <EmployeesCard letter={letter} employees={list} key={letter} saveToStorage={saveToStorage} />\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <h2 style={{ textAlign: 'center', borderBottom: '1px solid black' }}>Employees Birthday</h2>\r\n        <div className='birthday-list'>\r\n          {selected.length === 0\r\n            ? <h4>Employees List is empty</h4>\r\n            : months.map(m => {\r\n              const list: IEmployee[] = selected.filter((e: IEmployee): boolean => {\r\n                const month = months[(new Date(e.dob).getMonth() - (new Date().getMonth() - 12)) % 12]//toLocaleString is too bad from performance\r\n                return month === m\r\n              }).sort((e1: IEmployee, e2: IEmployee): number => {\r\n                if (e1.firstName.toLowerCase() < e2.firstName.toLowerCase()) return 1\r\n                else if (e1.firstName.toLowerCase() > e2.firstName.toLowerCase()) return -1\r\n                return 0\r\n              })\r\n              return (\r\n                <div key={m}>\r\n                  <BirthdayCard month={m} employees={list} />\r\n                </div>\r\n              )\r\n            })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useEffect } from 'react';\nimport { EmployeeList } from './components/EmployeeList/EmployeeList'\nimport { getAllEmployees, getFromStorage } from './actions/EmployeeActions'\nimport { useDispatch } from 'react-redux'\nimport { IEmployee } from './reducers/employeeReducer'\nimport { HashRouter, Routes, Route, Navigate } from 'react-router-dom'\n\n\nfunction App() {\n  const dispatch = useDispatch()\n  useEffect(() => {\n    const localEmployees: IEmployee[] | null = JSON.parse(window.localStorage.getItem('employees') || 'null')\n    if (localEmployees) {\n      dispatch(getFromStorage(localEmployees))\n    } else {\n      console.log('api')\n      dispatch(getAllEmployees())\n    }\n    //localEmployees ? dispatch(getFromStorage()) : dispatch(getAllEmployees())\n  }, [dispatch])\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Routes>\n          <Route path='/employees' element={<EmployeeList />} />\n          <Route path='*' element={<Navigate to='/employees' />} />\n        </Routes>\n        {/* <Navigate to='/employees' /> */}\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { Reducer } from 'redux'\r\nimport {\r\n  EmployeeActions,\r\n  EmployeeActionTypes\r\n} from '../actions/EmployeeActions'\r\n\r\nexport interface IEmployee {\r\n  id: string\r\n  firstName: string\r\n  lastName: string\r\n  dob: Date\r\n  selected: boolean\r\n}\r\n\r\nexport interface IEmployeeState {\r\n  readonly employees: IEmployee[]\r\n}\r\n\r\nconst initialEmployeeState: IEmployeeState = {\r\n  employees: []\r\n}\r\n\r\nexport const employeeReducer: Reducer<IEmployeeState, EmployeeActions> = (\r\n  state = initialEmployeeState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case EmployeeActionTypes.GET_ALL: {\r\n      console.log('asdasd')\r\n      return {\r\n        ...state,\r\n        employees: action.employees\r\n      }\r\n    }\r\n    case EmployeeActionTypes.TOGGLE_EMPLOYEE: {\r\n      const employeeToChange = state.employees.find(e => e.id === action.id) as IEmployee\r\n      const changedEmployee: IEmployee = { ...employeeToChange, selected: !employeeToChange?.selected }\r\n      const updatedList: IEmployee[] = state.employees.map(e => e.id === changedEmployee.id ? changedEmployee : e)\r\n      return {\r\n        ...state,\r\n        employees: updatedList\r\n      }\r\n    }\r\n    case EmployeeActionTypes.GET_ALL_FROM_STORAGE: {\r\n      return {\r\n        ...state,\r\n        employees: action.employees\r\n      }\r\n    }\r\n    default: return state\r\n  }\r\n}\r\n","import { applyMiddleware, combineReducers, createStore, Store } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {\r\n  employeeReducer,\r\n  IEmployeeState\r\n} from '../reducers/employeeReducer'\r\n\r\nexport interface IAppState {\r\n  employees: IEmployeeState\r\n}\r\n\r\nconst rootReducer = combineReducers<IAppState>({\r\n  employees: employeeReducer,\r\n})\r\n\r\nexport default function configureStore(): Store<IAppState, any> {\r\n  const store = createStore(rootReducer, applyMiddleware(thunk))\r\n  return store\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './style.css'\n\n\nimport { Provider } from 'react-redux'\nimport { Store } from 'redux'\n\nimport configureStore, { IAppState } from './store/Store'\n\n\ninterface IProps {\n  store: Store<IAppState>\n}\n\nconst Root: React.FunctionComponent<IProps> = props => {\n  return (\n    <Provider store={props.store}>\n      <App />\n    </Provider>\n  )\n}\n\nconst store = configureStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root store={store} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}